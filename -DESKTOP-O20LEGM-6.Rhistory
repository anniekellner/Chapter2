corr.sf2 <- select(corr.sf2, -c(in_anwr, in_npra))
# ------- PLOT  ----------------------------------------- #
# Select smaller sample to test (1%)
bone_samp <- slice_sample(bone2, prop = .01, replace = FALSE)
corr_samp <- slice_sample(corr.sf2, prop = .01, replace = FALSE)
# Plot
tmap_mode('view')
tm_shape(anwr) +
tm_polygons() +
tm_shape(npra) +
tm_polygons() +
tm_shape(bone_samp) +
tm_symbols(col = "red", popup.vars = "nature_preserve") +
tm_shape(corr_samp) +
tm_symbols(col = "blue", popup.vars = "nature_preserve")
tm_shape(anwr) +
tm_polygons() +
tm_shape(npra) +
tm_polygons() +
tm_shape(bone_samp) +
tm_symbols(col = "red", size = 0.1, popup.vars = "nature_preserve")
tm_shape(anwr) +
tm_polygons() +
tm_shape(npra) +
tm_polygons() +
tm_shape(bone_samp) +
tm_symbols(col = "red", size = 0.1, popup.vars = "nature_preserve") +
tm_shape(corr_samp) +
tm_symbols(col = "blue", size = 0.1, popup.vars = "nature_preserve")
head(corr.sf)
tm_shape(anwr) +
tm_polygons() +
tm_shape(npra) +
tm_polygons() +
tm_shape(bone_samp) +
tm_symbols(col = "red", size = 0.1, popup.vars = "nature_preserve") +
tm_shape(corr_samp) +
tm_symbols(col = "blue", size = 0.1, popup.vars = c("nature_preserve", "in_water"))
library(sf)
library(dplyr)
NSB <- './Data/Spatial/Municipal/NSB'
NLB <- './Data/Spatial/Municipal/Native lands & boundaries'
corr <- readRDS('./Data/Derived-data/corridor_data.Rds')
vill <- st_read(paste(NSB, 'North Slope Villages.shp', sep = '/'))
vill <- st_read('./Data/Spatial/Municipal/NSB/North Slope Villages.shp')
vill <- st_read('./Data/Spatial/Municipal/NSB/North_Slope_Villages.shp')
na1 <- st_read('./Data/Spatial/NSB/Native_Allotments_NS.shp')
na1 <- st_read('./Data/Spatial/NSB/Municipal/Native_Allotments_NS.shp')
na1 <- st_read('./Data/Spatial/Municipal/NSB/Native_Allotments_NS.shp')
vill <- st_read('./Data/Spatial/Municipal/NSB/North_Slope_Villages.shp')
vill <- st_read('./Data/Spatial/Municipal/NSB/North Slope Villages.shp')
vill <- st_read('./Data/Spatial/Municipal/NSB/North Slope Villages.shp')
library(sf)
library(dplyr)
vill <- st_read('./Data/Spatial/Municipal/NSB/North Slope Villages.shp') # File not working - need to fix
vill <- st_read('./Data/Spatial/Municipal/NSB/North Slope Villages.shp') # File not working - need to fix
library(sf)
library(dplyr)
vill <- st_read('./Data/Spatial/Municipal/NSB/North Slope Villages.shp') # File not working - need to fix
library(sf)
library(dplyr)
library(amt)
library(tmap)
library(tmaptools)
source('./Code/MyFunctions.R')
corr <- readRDS('./Data/Derived-data/corridor_data.Rds')
corr.sf <- st_as_sf(corr, crs = 3338)
vill <- st_read('C:/Users/akell/OneDrive - Colostate/PhD/Chapter2/Data/NSB GIS/NS_Villages.shp')
vill <- st_transform(vill, 3338)
na1 <- st_read('./Data/Spatial/Municipal/NSB/Native_Allotments_NS.shp')
na2 <- st_read('./Data/Spatial/Municipal/Native_lands_and_boundaries/native_allotments_east/NativeAllotments.shp')
native_allot <- st_join(na1, na2)
native_muni <- st_read('./Data/Spatial/Municipal/NSB/Native_lands_NPRA.shp')
cabins <- st_read('./Data/Spatial/Municipal/Native_lands_and_boundaries/native_cabins/cabins.shp')
vill_500m <- st_buffer(vill, 500)
vill_1km <- st_buffer(vill, 1000)
vill_5km <- st_buffer(vill, 5000)
buf_500m <- lengths(st_intersects(corr.sf, vill_500m)) > 0
buf_1km <-  lengths(st_intersects(corr.sf, vill_1km)) > 0
buf_5km <- lengths(st_intersects(corr.sf, vill_5km)) > 0
corr.sf2 <- corr.sf %>%
mutate(village_buffer500m = lengths(st_intersects(., vill_500m)) > 0) %>%
mutate(village_buffer1km = lengths(st_intersects(., vill_1km)) > 0 ) %>%
mutate(village_buffer5km = lengths(st_intersects(., vill_1km)) > 0 )
?time_of_day
head)corr.sf
head(corr.sf)
?fit_issf
m_villages <- fit_issf(corr.sf2, case_ ~ vill_500m, strata(step_id_))
head(corr.sf2)
m_villages <- fit_issf(corr.sf2, case_ ~ village_buffer500m, strata(step_id_))
which(village_buffer500m = TRUE)
which(corr.sf2$village_buffer500m == TRUE)
buf_500m <- lengths(st_intersects(corr.sf, vill_500m)) > 0
which(buf_500m == TRUE)
tmap_mode('view')
tm_shape(vill) +
tm_symbols(col = "purple", shape = 0) +
tm_shape(native_allot) +
tm_symbols(col = "green", shape = 3) +
tm_shape(native_muni) +
tm_polygons(col = "yellow") +
tm_shape(cabins) +
tm_symbols(col = "blue", shape = 6) +
tm_shape(corr.pl) +
tm_symbols(size = 0.1, alpha = 0.5)
corr.pl <- slice_sample(corr.sf, prop = .05, replace = FALSE) # So it doesn't take too long to plot
tm_shape(vill) +
tm_symbols(col = "purple", shape = 0) +
tm_shape(native_allot) +
tm_symbols(col = "green", shape = 3) +
tm_shape(native_muni) +
tm_polygons(col = "yellow") +
tm_shape(cabins) +
tm_symbols(col = "blue", shape = 6) +
tm_shape(corr.pl) +
tm_symbols(size = 0.1, alpha = 0.5)
plot(vill_500m)
which(corr.sf2$village_buffer1km == TRUE)
m_villages <- fit_issf(corr.sf2, case_ ~ village_buffer1km, strata(step_id_), model = TRUE)
?fit_ssf
which(corr.sf2$village_buffer500m == TRUE)
rm(list = ls())
amt_data <- readRDS('./Data/Derived-data/non_bp_pts_used_avail.Rds')
head(amt_data)
which(amt_data$step_id_ == 2)
corr.sf$unique_step_id <- paste(corr.sf$id, corr.sf$step_id_, sep = "_")
rm(list = ls())
corr <- readRDS('./Data/Derived-data/corridor_data.Rds')
corr.sf <- st_as_sf(corr, crs = 3338)
corr.pl <- slice_sample(corr.sf, prop = .05, replace = FALSE) # So it doesn't take too long to plot
# Make unique step ID's so can run at population level
corr.sf$unique_step_id <- paste(corr.sf$id, corr.sf$step_id_, sep = "_")
vill <- st_read('C:/Users/akell/OneDrive - Colostate/PhD/Chapter2/Data/NSB GIS/NS_Villages.shp')
vill <- st_transform(vill, 3338)
vill_500m <- st_buffer(vill, 500)
vill_1km <- st_buffer(vill, 1000)
vill_5km <- st_buffer(vill, 5000)
corr.sf2 <- corr.sf %>%
mutate(village_buffer500m = lengths(st_intersects(., vill_500m)) > 0) %>%
mutate(village_buffer1km = lengths(st_intersects(., vill_1km)) > 0 ) %>%
mutate(village_buffer5km = lengths(st_intersects(., vill_1km)) > 0 )
head(corr.sf2)
m_villages <- fit_issf(corr.sf2, case_ ~ village_buffer1km + strata(unique_step_id_), model = TRUE)
m_villages <- fit_issf(corr.sf2, case_ ~ village_buffer1km + strata(unique_step_id), model = TRUE)
summary(m_villages)
which(corr.sf2$village_buffer500m == TRUE)
View(corr.sf2)
which(corr.sf2$village_buffer1km == TRUE) #
which(corr.sf2$village_buffer5km == TRUE)
corr.sf2 <- corr.sf %>%
mutate(village_buffer500m = lengths(st_intersects(., vill_500m)) > 0) %>%
mutate(village_buffer1km = lengths(st_intersects(., vill_1km)) > 0 ) %>%
mutate(village_buffer5km = lengths(st_intersects(., vill_5km)) > 0 )
which(corr.sf2$village_buffer5km == TRUE)
cabins <- st_read('./Data/Spatial/Municipal/Native_lands_and_boundaries/native_cabins/cabins.shp')
cab_500m <- st_buffer(cabins, 500)
corr.sf3 <- corr.sf %>%
mutate(cabins = lengths(st_intersects(., cab_500m)) > 0)
which(corr.sf3$cabins == TRUE)
mud_arc <- st_read('./OIL/BP_GIS/mud_arc')
library(sf)
library(tmap)
library(tmaptools)
mud_arc <- st_read('./OIL/BP_GIS/mud_arc')
setwd('C:/Users/akell/Documents/ArcGIS/Polar_Bears_GIS/GIS_from_Todd/Industry_GIS') #  When working from laptop
mud_arc <- st_read('./OIL/BP_GIS/mud_arc')
plot(st_geometry(mud_arc))
mud <- st_read('./OIL/BP_GIS/mud_poly')
tmap_mode('view')
tm_shape(mud) +
tm_polygons(col = "brown") +
tm_shape(mud_arc) +
tm_polygons(col = "red")
tm_shape(mud) +
tm_lines(col = "brown") +
tm_shape(mud_arc) +
tm_polygons(col = "red")
tm_shape(mud) +
tm_lines(col = "brown") +
tm_shape(mud_arc) +
tm_lines(col = "red")
mineair <- st_read('./OIL/BP_GIS/mineair_poly')
plot(st_geometry(mineair))
mask_arc <- st_read('./OIL/BP_GIS/mask_arc')
plot(st_geometry(mask_arc))
library(sf)
library(tmap)
library(tmaptools)
setwd('C:/Users/akell/Documents/ArcGIS/Polar_Bears_GIS/GIS_from_Todd/Industry_GIS') #  When working from laptop
tm_shape(roads) +
tm_lines(col = "green") +
tm_shape(tiger_roads) +
tm_lines(col = "blue") +
tm_layout(legend.show = TRUE)
roads <- st_read('./OIL/ROADS.shp')
plot(st_geometry(roads))
tiger_roads <- st_read('./OIL/tiger_roads.shp')
tiger_roads <- tiger_roads %>%
st_set_crs(4326) %>%
st_transform(4609)
tm_shape(roads) +
tm_lines(col = "green") +
tm_shape(tiger_roads) +
tm_lines(col = "blue") +
tm_layout(legend.show = TRUE)
rm(list = ls())
library(sf)
library(tmap)
library(tmaptools)
setwd('C:/Users/akell/Documents/ArcGIS/Polar_Bears_GIS/GIS_from_Todd/Industry_GIS') #  When working from laptop
setwd('C:/Users/akell/Documents/ArcGIS/Polar_Bears_GIS/GIS_from_Todd/Industry_GIS/CP_Infrastructure/CP_Infrastructure') #  When working from laptop
bt_pipe <- st_read('./Badami_Thomson_pipeline.shp')
plot(st_geometry(bt_pipe))
haul_road <- st_read('./haul_road.shp')
plot(st_geometry(haul_road))
gravel <- st_read('./Kuparuk_Gravel.shp')
plot(st_geometry(gravel))
gravel_pads <- st_Read('./Kuparuk_Gravel_Pads.shp')
gravel_pads <- st_read('./Kuparuk_Gravel_Pads.shp')
plot(st_geometry(gravel_pads))
gravel_roads <- st_read('./Kuparuk_Gravel_Roads.shp')
plot(st_geometry(gravel_roads))
tmape_mode('view')
tmap_mode('view')
tm_shape(gravel) +
tm_lines(col = "red") +
tm_shape(gravel_pads) +
tm_polygons(col = "black") +
tm_shape(gravel_roads) +
tm_shape(col = "blue")
tm_shape(gravel) +
tm_lines(col = "red") +
tm_shape(gravel_pads) +
tm_polygons(col = "black") +
tm_shape(gravel_roads) +
tm_lines(col = "blue")
tm_shape(gravel) +
tm_polygons(col = "red") +
tm_shape(gravel_pads) +
tm_polygons(col = "black") +
tm_shape(gravel_roads) +
tm_lines(col = "blue")
tm_shape(gravel) +
tm_polygons(col = "red") +
tm_shape(gravel_pads) +
tm_polygons(col = "black") +
tm_shape(gravel_roads) +
tm_polygons(col = "blue")
pipelines <- st_read('./Kuparuk_Pipelines.shp')
roads <- st_read('./Kuparuk_Roads.shp')
tm_shape(gravel) +
tm_polygons(col = "red") +
tm_shape(gravel_pads) +
tm_polygons(col = "gray") +
tm_shape(gravel_roads) +
tm_polygons(col = "blue") +
tm_shape(piplines) +
tm_lines(col = "black") +
tm_shape(roads) +
tm_lines(col = "yellow")
tm_shape(gravel) +
tm_polygons(col = "red") +
tm_shape(gravel_pads) +
tm_polygons(col = "gray") +
tm_shape(gravel_roads) +
tm_polygons(col = "blue") +
tm_shape(pipelines) +
tm_lines(col = "black") +
tm_shape(roads) +
tm_lines(col = "yellow")
corr <- readRDS('./Data/Derived-data/corridor_data.Rds')
head(corr)
library(dplyr)
library(sf)
library(tmap)
library(tmaptools)
coast <- st_read('./Data/Spatial/coastline/digitized_coastline.shp') # Used .shp of coastline as digitized from IFSAR images on GEE
coast <- st_transform(coast, 3338)
st_crs(corr)
corr.sf <- st_as_sf(corr, crs = 3338)
corr.sf <- corr.sf %>%
mutate(dist_to_coast = st_distance(., coast))
corr.sf$dist_to_coast <- ifelse(corr.sf$on_island == "TRUE" | corr.sf$in_water == 1, corr.sf$dist_to_coast*-1, corr.sf$dist_to_coast)
arcgis <- 'C:/Users/akell/Documents/ArcGIS/Projects/Chapter2/Test'
sample1 <- slice_sample(corr.sf, prop = .01, replace = FALSE) # randomly select 1% of observations
st_write(sample1, paste0(arcgis, "/", "dist_to_coast.shp"))
st_write(sample1, paste0(arcgis, "/", "dist_to_coast.shp"), append = FALSE)
tmap_mode('view')
tm_shape(coast) +
tm_lines(col = "green") +
tm_shape(sample1) +
tm_symbols(popup.vars = c('dist_to_coast'))
head(corr.sf)
rm(list= ls())
library(dplyr)
library(sf)
islands <- st_read('./Data/Spatial/Barrier_Islands/all_islands.shp') # shapefile with all islands
plot(st_geometry(islands), col = "green")
corr <- readRDS('./Data/Derived-data/corridor_data.Rds')
corr.sf <- st_as_sf(corr, crs = 3338)
plot(st_geometry(corr))
plot(st_geometry(islands), col = "green", add = TRUE)
plot(st_geometry(corr))
plot(st_geometry(corr.sf))
plot(st_geometry(corr.sf))
plot(st_geometry(islands), col = "green", add = TRUE)
?st_buffer
buff <- st_buffer(islands, dist = 5)
plot(st_geometry(buff))
library(tmap)
library(tmaptools)
tmap_mode('view')
tm_shape(buff) +
tm_polygons(col = "orange") +
tm_shape(islands) +
tm_polygons(col = "purple")
tm_shape(buff) +
tm_polygons(col = "orange")
head(buff)
head(islands)
?st_buffer
buff <- st_buffer(islands, dist = 5, endCapStyle = "ROUND")
head(buff)
plot(st_buffer(islands, dist = 5, endCapStyle = "ROUND"))
samp <- slice_sample(islands, prop = 0.01, replace = FALSE)
plot(st_geometry(samp))
plot(st_geometry(samp))
plot(samp)
library(dplyr)
library(sf)
library(tmap)
library(tmaptools)
islands <- st_read('./Data/Spatial/Barrier_Islands/all_islands.shp') # shapefile with all islands
?slice_sample
?st_sample
class(islands)
islands[1]
samp <- islands[1]
head(samp)
st_crs(islands)
head(islands)
examp <- filter(islands, Shape_Leng == 6888.513)
examp <- dplyr::filter(islands, Shape_Leng == 6888.513)
examp <- dplyr::filter(islands, Shape_Area < 91738)
buff_ex <- st_buffer(examp, dist = 5)
head(examp)
head(buff_ex)
plot(st_geometry(examp))
plot(buff_ex)
st_crs(examp)
buff_ex <- sf::st_buffer(examp, dist = 5)
plot(st_geometry(buff_ex))
st_crs(islands)
st_crs(islands)$units
examp <- dplyr::filter(islands, Shape_Area < 20000)
plot(st+geometry(examp))
plot(st_geometry(examp))
plot(st_geometry(examp))
head(examp)
examp <- dplyr::filter(islands, Shape_Area < 5000)
buff_ex <- sf::st_buffer(examp, dist = 5)
plot(st_geometry(buff_ex))
head(examp)
head(buff_ex)
examp2 <- st_make_valid(examp)
buff_ex <- sf::st_buffer(examp2, dist = 5)
head(buff_ex)
examp
plot(st_geometry(examp))
plot(st_geometry(examp))
tmap_mode('view')
tm_shape(examp) +
tm_polygons()
cast_test <- st_cast(examp, "POLYGON")
plot(st_geometry(cast_test))
tm_shape(cast_test) +
tm_polygons()
head(cast_test)
buff_cast <- st_buffer(cast_test, dist = 5)
head(buff_cast)
tm_shape(buff_cast) +
tm_polygons(col = "orange") +
tm_shape(cast_test) +
tm_polygons(col = "purple")
cast <- st_cast(islands, "POLYGON")
buff <- st_buffer(cast, dist = 5)
?st_join
islands_w_buffer <- st_join(cast, buff)
buff <- st_buffer(cast, dist = 5000)
tm_shape(buff) +
tm_polygons(col = "orange") +
tm_shape(cast) +
tm_polygons(col = "purple")
islands_w_buffer <- st_join(cast, buff)
?st_write
st_write(islands_w_buffer, './Data/Spatial/islands_w_5km_buffer.shp')
corr <- readRDS('./Data/Derived-data/corridor_data.Rds')
corr.sf <- st_as_sf(corr, crs = 3338)
object.size(islands_w_buffer)
library(dplyr)
library(sf)
corr <- readRDS('./Data/Derived-data/corridor_data.Rds')
corr.sf <- st_as_sf(corr, crs = 3338)
islands <- st_read('./Data/Spatial/Barrier_Islands/all_islands.shp') # shapefile with all islands
cast <- st_cast(islands, "POLYGON")
buff <- st_buffer(cast, dist = 5000)
plot(st_geometry(buff))
plot(st_geometry(cast))
tmap_mode('view')
tm_shape(buff) +
tm_polygons(col = "orange")
library(tmap)
library(tmaptools)
tm_shape(buff) +
tm_polygons(col = "orange")
tmap_mode('view')
tm_shape(buff) +
tm_polygons(col = "orange")
tm_shape(buff) +
tm_polygons(col = "orange") +
tm_shape(cast) +
tm_polygons(col = "purple")
buff <- st_buffer(cast, dist = 3000)
tmap_mode('view')
tm_shape(buff) +
tm_polygons(col = "orange") +
tm_shape(cast) +
tm_polygons(col = "purple") +
tm_shape(corr.sf) +
tm_symbols(shape = 3)
pts <- readRDS('./Data/all_bonepile_points.Rds')
tm_shape(buff) +
tm_polygons(col = "orange") +
tm_shape(cast) +
tm_polygons(col = "purple") +
tm_shape(pts) +
tm_symbols(size = 0.5)
bone_pts <- readRDS('./Data/all_bonepile_points.Rds') # used only - bonepile
corr_pts <- readRDS('./Data/all_non_bonepile_pts.Rds') # used only - corridor
tm_shape(buff) +
tm_polygons(col = "orange") +
tm_shape(cast) +
tm_polygons(col = "purple") +
tm_shape(bone_pts) +
tm_symbols(size = 0.25) +
tm_shape(corr_pts, col = "black") +
tm_symbols(size = 0.25, col = "gray")
tm_shape(buff) +
tm_polygons(col = "orange") +
tm_shape(cast) +
tm_polygons(col = "purple") +
tm_shape(bone_pts) +
tm_symbols(size = 0.25) +
tm_shape(corr_pts) +
tm_symbols(size = 0.25, col = "black") +
tm_shape(bone_pts) +
tm_symbols(size = 0.25, col = "gray")
buff <- st_buffer(cast, dist = 2000)
tm_shape(buff) +
tm_polygons(col = "orange") +
tm_shape(cast) +
tm_polygons(col = "purple") +
tm_shape(bone_pts) +
tm_symbols(size = 0.25) +
tm_shape(corr_pts) +
tm_symbols(size = 0.25, col = "black") +
tm_shape(bone_pts) +
tm_symbols(size = 0.25, col = "gray")
tm_shape(buff) +
tm_polygons(col = "orange")
buff <- st_buffer(cast, dist = 1000)
# Plot to check
tmap_mode('view')
tm_shape(buff) +
tm_polygons(col = "orange") +
tm_shape(cast) +
tm_polygons(col = "purple") +
tm_shape(bone_pts) +
tm_symbols(size = 0.25) +
tm_shape(corr_pts) +
tm_symbols(size = 0.25, col = "black") +
tm_shape(bone_pts) +
tm_symbols(size = 0.25, col = "gray")
buff <- st_buffer(cast, dist = 1500)
# Plot to check
tmap_mode('view')
tm_shape(buff) +
tm_polygons(col = "orange") +
tm_shape(cast) +
tm_polygons(col = "purple") +
tm_shape(bone_pts) +
tm_symbols(size = 0.25) +
tm_shape(corr_pts) +
tm_symbols(size = 0.1, col = "black") +
tm_shape(bone_pts) +
tm_symbols(size = 0.1, col = "gray")
st_write(buff, './Data/Spatial/islands_w_1500m_buffer.shp')
warnings()
on_island = lengths(st_intersects(corr.sf, buff)) > 0 # creates a vector of whether or not point is on island
ua <- cbind(corr.sf, on_island)
head(ua)
saveRDS(ua, './Data/Derived-data/corridor_data.Rds')
bone <- readRDS('./Data/Derived-data/bonepile_data.Rds')
class(bone)
on_island = lengths(st_intersects(bone, buff)) > 0
ua_bone <- cbind(bone, on_island)
head(ua_bone)
saveRDS(ua_bone, './Data/Derived-data/bonepile_data.Rds')
bone <- readRDS('./Data/Derived-data/bonepile_data.Rds')
head(bone)
unique(bone$id)
